'use client'

import { useState } from 'react'
import { ChevronDown, ChevronRight, Copy, User, Bot, Settings, Wrench, AlertCircle } from 'lucide-react'
import ReactMarkdown from 'react-markdown'

interface LLMMessage {
  type: 'system' | 'user' | 'assistant' | 'tool_call' | 'tool_response' | 'error'
  content: string
  metadata?: {
    toolCallId?: string
    toolName?: string
    arguments?: Record<string, unknown>
    provider?: string
    model?: string
  }
}

interface LLMMessageCardProps {
  message: LLMMessage
  index: number
  defaultOpen?: boolean
}

export function LLMMessageCard({ message, index, defaultOpen = false }: LLMMessageCardProps) {
  const [isExpanded, setIsExpanded] = useState(defaultOpen)
  
  const getMessageStyle = (type: string) => {
    switch (type) {
      case 'system':
        return {
          icon: <Settings className="h-4 w-4" />,
          bgColor: 'bg-amber-50',
          borderColor: 'border-amber-200',
          headerBg: 'bg-amber-100',
          textColor: 'text-amber-800',
          label: 'System Prompt',
          description: 'Instructions and context provided to the model'
        }
      case 'user':
        return {
          icon: <User className="h-4 w-4" />,
          bgColor: 'bg-blue-50',
          borderColor: 'border-blue-200',
          headerBg: 'bg-blue-100',
          textColor: 'text-blue-800',
          label: 'User Input',
          description: 'Message from the user'
        }
      case 'assistant':
        return {
          icon: <Bot className="h-4 w-4" />,
          bgColor: 'bg-emerald-50',
          borderColor: 'border-emerald-200',
          headerBg: 'bg-emerald-100',
          textColor: 'text-emerald-800',
          label: 'AI Response',
          description: 'Response generated by the language model'
        }
      case 'tool_call':
        return {
          icon: <Wrench className="h-4 w-4" />,
          bgColor: 'bg-violet-50',
          borderColor: 'border-violet-200',
          headerBg: 'bg-violet-100',
          textColor: 'text-violet-800',
          label: 'Tool Call',
          description: `Function call: ${message.metadata?.toolName || 'Unknown'}`
        }
      case 'tool_response':
        return {
          icon: <Wrench className="h-4 w-4" />,
          bgColor: 'bg-orange-50',
          borderColor: 'border-orange-200',
          headerBg: 'bg-orange-100',
          textColor: 'text-orange-800',
          label: 'Tool Response',
          description: 'Result from tool execution'
        }
      case 'error':
        return {
          icon: <AlertCircle className="h-4 w-4" />,
          bgColor: 'bg-red-50',
          borderColor: 'border-red-200',
          headerBg: 'bg-red-100',
          textColor: 'text-red-800',
          label: 'Error',
          description: 'An error occurred during processing'
        }
      default:
        return {
          icon: <Bot className="h-4 w-4" />,
          bgColor: 'bg-slate-50',
          borderColor: 'border-slate-200',
          headerBg: 'bg-slate-100',
          textColor: 'text-slate-800',
          label: 'Message',
          description: 'Unknown message type'
        }
    }
  }

  const style = getMessageStyle(message.type)
  
  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(message.content)
      // TODO: Add toast notification
    } catch (err) {
      console.error('Failed to copy:', err)
    }
  }

  const formatSystemPrompt = (content: string) => {
    // System prompts often have multiple sections, let's format them nicely
    const sections = content.split(/\n\n+/)
    
    return (
      <div className="space-y-2">
        {sections.map((section, index) => {
          const trimmed = section.trim()
          if (!trimmed) return null
          
          // Check if it's a heading (starts with # or ALL CAPS)
          const isHeading = trimmed.match(/^#+\s/) || (trimmed.length < 50 && trimmed === trimmed.toUpperCase() && trimmed.includes(' '))
          
          if (isHeading) {
            return (
              <div key={index} className="font-semibold text-xs text-amber-900 border-b border-amber-200 pb-1">
                {trimmed.replace(/^#+\s*/, '')}
              </div>
            )
          }
          
          // Check if it's a list item
          if (trimmed.match(/^[-*]\s/)) {
            return (
              <div key={index} className="text-xs text-amber-800 pl-2 border-l-2 border-amber-200">
                {trimmed.replace(/^[-*]\s/, 'â€¢ ')}
              </div>
            )
          }
          
          return (
            <div key={index} className="text-xs text-amber-800 leading-snug">
              {trimmed}
            </div>
          )
        })}
      </div>
    )
  }

  const formatContent = () => {
    // Handle system prompts specially for better readability
    if (message.type === 'system') {
      return formatSystemPrompt(message.content)
    }
    
    // Handle tool calls specially
    if (message.type === 'tool_call' && message.metadata?.arguments) {
      return (
        <div className="space-y-3">
          <div className="flex items-center gap-2">
            <span className="text-xs font-medium text-slate-700">Function:</span>
            <code className="px-1.5 py-0.5 bg-slate-100 rounded text-xs font-mono text-slate-800">
              {message.metadata.toolName}
            </code>
          </div>
          <div>
            <span className="text-xs font-medium text-slate-700 block mb-1">Arguments:</span>
            <pre className="bg-slate-900 text-emerald-400 p-2 rounded text-xs overflow-x-auto font-mono leading-tight">
              {JSON.stringify(message.metadata.arguments, null, 2)}
            </pre>
          </div>
        </div>
      )
    }

    // Handle JSON content
    try {
      const parsed = JSON.parse(message.content)
      if (typeof parsed === 'object' && parsed !== null) {
        return (
          <pre className="bg-slate-900 text-emerald-400 p-2 rounded text-xs overflow-x-auto font-mono leading-tight">
            {JSON.stringify(parsed, null, 2)}
          </pre>
        )
      }
    } catch {
      // Not JSON, continue with regular text
    }

    // Check if content looks like markdown
    const hasMarkdownFeatures = message.content && (
      message.content.includes('**') ||
      message.content.includes('`') ||
      message.content.includes('#') ||
      message.content.includes('[') ||
      message.content.includes('*') ||
      message.content.includes('-')
    )

    // Render markdown for AI responses and system prompts
    if (hasMarkdownFeatures && message.type === 'assistant') {
      return (
        <div className="prose prose-xs max-w-none prose-slate text-slate-800 leading-snug">
          <ReactMarkdown
            components={{
              code: ({ children, className }) => {
                const isInline = !className
                if (isInline) {
                  return (
                    <code className="px-1 py-0.5 bg-slate-100 text-slate-800 rounded text-xs font-mono">
                      {children}
                    </code>
                  )
                }
                return (
                  <pre className="bg-slate-900 text-emerald-400 p-2 rounded text-xs overflow-x-auto font-mono leading-tight">
                    <code>{children}</code>
                  </pre>
                )
              },
              p: ({ children }) => (
                <p className="mb-2 last:mb-0 text-xs text-slate-800 leading-snug">{children}</p>
              ),
              ul: ({ children }) => (
                <ul className="mb-2 list-disc list-inside text-xs text-slate-800 leading-snug">{children}</ul>
              ),
              ol: ({ children }) => (
                <ol className="mb-2 list-decimal list-inside text-xs text-slate-800 leading-snug">{children}</ol>
              ),
              strong: ({ children }) => (
                <strong className="font-semibold text-xs text-slate-900">{children}</strong>
              ),
              h1: ({ children }) => (
                <h1 className="text-sm font-bold text-slate-900 mb-2">{children}</h1>
              ),
              h2: ({ children }) => (
                <h2 className="text-sm font-semibold text-slate-900 mb-1">{children}</h2>
              ),
              h3: ({ children }) => (
                <h3 className="text-xs font-semibold text-slate-900 mb-1">{children}</h3>
              ),
              blockquote: ({ children }) => (
                <blockquote className="border-l-2 border-slate-300 pl-2 text-xs text-slate-600 italic mb-2">{children}</blockquote>
              )
            }}
          >
            {message.content}
          </ReactMarkdown>
        </div>
      )
    }

    // Regular text content
    return (
      <div className="whitespace-pre-wrap leading-snug text-xs text-slate-800">
        {message.content || <span className="text-slate-400 italic text-xs">No content</span>}
      </div>
    )
  }

  return (
    <div className={`border rounded shadow-sm ${style.bgColor} ${style.borderColor} mb-2`}>
      {/* Header */}
      <div className={`px-3 py-2 ${style.headerBg} rounded-t border-b ${style.borderColor}`}>
        <div className="flex items-center justify-between">
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="flex items-center gap-2 text-left group flex-1"
          >
            <div className={`flex items-center gap-2 ${style.textColor}`}>
              {style.icon}
              <span className="font-medium text-sm">{style.label}</span>
              <span className="text-xs bg-white/80 px-1.5 py-0.5 rounded">
                #{index + 1}
              </span>
            </div>
            {isExpanded ? (
              <ChevronDown className="h-4 w-4 group-hover:scale-110 transition-transform ml-auto" />
            ) : (
              <ChevronRight className="h-4 w-4 group-hover:scale-110 transition-transform ml-auto" />
            )}
          </button>
          
          <button
            onClick={handleCopy}
            className="p-1 hover:bg-white/50 rounded transition-colors ml-2"
            title="Copy content"
          >
            <Copy className="h-3 w-3" />
          </button>
        </div>
        
        {!isExpanded && (
          <div className="mt-1 text-xs text-slate-600 truncate">
            {style.description}
          </div>
        )}
      </div>

      {/* Content */}
      {isExpanded && (
        <div className="p-2">
          {formatContent()}
        </div>
      )}
    </div>
  )
}